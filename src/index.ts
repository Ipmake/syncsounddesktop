import axios from 'axios';
import { app, BrowserWindow, Menu, MenuItem, screen } from 'electron';
import os from 'os';
import fs from 'fs';
import { spawn } from 'child_process';
import RPC from 'discord-rich-presence';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

const rpc = RPC("1126154020067749929")

if (os.platform() === 'win32') if (!fs.existsSync(`${os.homedir()}/AppData/Roaming/SyncSound`)) fs.mkdirSync(`${os.homedir()}/AppData/Roaming/SyncSound`, { recursive: true });
if (os.platform() === 'linux') if (!fs.existsSync(`${os.homedir()}/.config/SyncSound`)) fs.mkdirSync(`${os.homedir()}/.config/SyncSound`, { recursive: true });

if (fs.existsSync(`${os.homedir()}/AppData/Roaming/SyncSound/hwacc`)) app.disableHardwareAcceleration();

// app.disableHardwareAcceleration();
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

interface lastPos {
  x: number;
  y: number;
  width: number;
  height: number;
}

const createWindow = (): void => {
  const lastpos: lastPos = JSON.parse(fs.existsSync(`${os.homedir()}/AppData/Roaming/SyncSound/lastpos`) ? fs.readFileSync(`${os.homedir()}/AppData/Roaming/SyncSound/lastpos`).toString() : JSON.stringify({ x: Math.floor(screen.getPrimaryDisplay().workArea.width / 2 - (1000 / 2)), y: Math.floor(screen.getPrimaryDisplay().workArea.height / 2 - (700 / 2)), width: 1000, height: 700 }));

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: lastpos.height,
    width: lastpos.width,
    minHeight: 700,
    minWidth: 1000,
    x: lastpos.x,
    y: lastpos.y,
    webPreferences: {
      webSecurity: true,
      autoplayPolicy: 'no-user-gesture-required',
    },
    autoHideMenuBar: true,
    icon: `./images/logo.png`
  });

  // set the menu bar
  const menu = Menu.buildFromTemplate([
    {
      label: 'Home',
      click: () => {
        mainWindow.loadURL('https://open.syncsound.net');
      }
    }, {
      label: fs.existsSync(`${os.homedir()}/AppData/Roaming/SyncSound/hwacc`) ? 'Enable HWAcceleration' : 'Disable HWAcceleration',
      click: () => {
        if (fs.existsSync(`${os.homedir()}/AppData/Roaming/SyncSound/hwacc`)) fs.unlinkSync(`${os.homedir()}/AppData/Roaming/SyncSound/hwacc`);
        else fs.writeFileSync(`${os.homedir()}/AppData/Roaming/SyncSound/hwacc`, '');

        app.relaunch();
        app.quit();
      }
    }
  ])

  mainWindow.setMenu(menu);

  // mainWindow.webContents.on('will-navigate', (event, url) => {
  //   console.log(url)
  //   if (url === 'https://open.syncsound.net/login') LoginProcess(mainWindow);
  //   if (url === 'https://syncsound.net/') mainWindow.loadURL('https://open.syncsound.net');
  // })

  mainWindow.on('close', () => {
    if (os.platform() === 'win32') fs.writeFileSync(`${os.homedir()}/AppData/Roaming/SyncSound/lastpos`, JSON.stringify(mainWindow.getBounds()));
    if (os.platform() === 'linux') fs.writeFileSync(`${os.homedir()}/.config/SyncSound/lastpos`, JSON.stringify(mainWindow.getBounds()));
  })


  mainWindow.loadURL("https://open.syncsound.net");

  mainWindow.webContents.on('did-finish-load', () => {
    console.log(mainWindow.webContents.getURL())
    if (mainWindow.webContents.getURL() === "https://open.syncsound.net/login") return LoginProcess(mainWindow);
    setInterval(async () => {
      try {
        const data = await mainWindow.webContents.executeJavaScript(`window.getPlayBackInfo()`);
        if (!data) return;

        if (!data.queue[0]) rpc.updatePresence({
          details: `Idle`,
          state: `In session (${data.members.length} of 8)`,
          largeImageKey: "https://open.syncsound.net/logo.png"
        })
        else rpc.updatePresence({
          details: `Playing ${data.queue[0].title}`,
          state: `In session (${data.members.length} of 8)`,
          largeImageKey: data.queue[0].thumbnail,
          ...(!data.playback.paused && {
            endTimestamp: Date.now() + (data.queue[0].duration - data.playback.time) * 1000,
          })
        })
      } catch (error) {
        console
      }
    }, 3000);
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  rpc.disconnect();
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

async function LoginProcess(mainWindow: BrowserWindow) {
  mainWindow.loadFile(`./src/login.html`);

  const state = await axios.get("https://auth.syncsound.net/auth/discordreq")
  console.log(state.data);

  if (os.platform() === 'win32') spawn('cmd', ['/c', 'start', `https://auth.syncsound.net/auth/discordreq/${state.data}`]);
  else if (os.platform() === 'linux') spawn('xdg-open', [`https://auth.syncsound.net/auth/discordreq/${state.data}`]);

  const code = await axios.get(`https://auth.syncsound.net/auth/discordreqhook/${state.data}`, {
    timeout: 1000 * 60 * 10
  });

  mainWindow.loadURL(`https://open.syncsound.net/auth/discord?code=${code.data}`);
}
